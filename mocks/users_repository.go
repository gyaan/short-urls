// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/gyaan/short-urls/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Users is an autogenerated mock type for the Users type
type Users struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *Users) CreateUser(ctx context.Context, user models.User) (*models.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, models.User) *models.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetailsById provides a mock function with given fields: ctx, userId
func (_m *Users) GetUserDetailsById(ctx context.Context, userId string) (*models.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetailsByName provides a mock function with given fields: ctx, name
func (_m *Users) GetUserDetailsByName(ctx context.Context, name string) (*models.User, error) {
	ret := _m.Called(ctx, name)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, userId, user
func (_m *Users) UpdateUser(ctx context.Context, userId string, user *models.User) error {
	ret := _m.Called(ctx, userId, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.User) error); ok {
		r0 = rf(ctx, userId, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
